import processTpl, { genLinkReplaceSymbol } from './process-tpl';
import { getGlobalProp, getInlineCode, noteGlobalProps } from './utils';
var styleCache = {};
var scriptCache = {};
var embedHTMLCache = {};
var fetch = window.fetch.bind(window);

function getDomain(url) {
  try {
    // URL 构造函数不支持使用 // 前缀的 url
    var href = new URL(url.startsWith('//') ? "".concat(location.protocol).concat(url) : url);
    return href.origin;
  } catch (e) {
    return '';
  }
}
/**
 * convert external css link to inline style for performance optimization
 * @param template
 * @param styles
 * @return embedHTML
 */


function getEmbedHTML(template, styles) {
  var embedHTML = template;
  return _getExternalStyleSheets(styles).then(function (styleSheets) {
    embedHTML = styles.reduce(function (html, styleSrc, i) {
      html = html.replace(genLinkReplaceSymbol(styleSrc), "<style>/* ".concat(styleSrc, " */").concat(styleSheets[i], "</style>"));
      return html;
    }, embedHTML);
    return embedHTML;
  });
} // for prefetch


function _getExternalStyleSheets(styles) {
  return Promise.all(styles.map(function (styleLink) {
    if (styleLink.startsWith('<')) {
      // if it is inline style
      return getInlineCode(styleLink);
    } else {
      // external styles
      return styleCache[styleLink] || (styleCache[styleLink] = fetch(styleLink).then(function (response) {
        return response.text();
      }));
    }
  }));
} // for prefetch


function _getExternalScripts(scripts) {
  return Promise.all(scripts.map(function (script) {
    if (script.startsWith('<')) {
      // if it is inline script
      return getInlineCode(script);
    } else {
      // external script
      return scriptCache[script] || (scriptCache[script] = fetch(script).then(function (response) {
        return response.text();
      }));
    }
  }));
}

function _execScripts(entry, scripts) {
  var proxy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window;
  return _getExternalScripts(scripts).then(function (scriptsText) {
    window.proxy = proxy;
    var geval = eval;

    function exec(scriptSrc, inlineScript, resolve) {
      var markName = "Evaluating script ".concat(scriptSrc);
      var measureName = "Evaluating Time Consuming: ".concat(scriptSrc);

      if (process.env.NODE_ENV === 'development') {
        performance.mark(markName);
      }

      if (scriptSrc === entry) {
        noteGlobalProps();

        try {
          // bind window.proxy to change `this` reference in script
          geval(";(function(window){;".concat(inlineScript, "\n}).bind(window.proxy)(window.proxy);"));
        } catch (e) {
          console.error("error occurs while executing the entry ".concat(scriptSrc));
          throw e;
        }

        var exports = proxy[getGlobalProp()] || {};
        resolve(exports);
      } else {
        try {
          // bind window.proxy to change `this` reference in script
          geval(";(function(window){;".concat(inlineScript, "\n}).bind(window.proxy)(window.proxy);"));
        } catch (e) {
          console.error("error occurs while executing ".concat(scriptSrc));
          throw e;
        }
      }

      if (process.env.NODE_ENV === 'development') {
        performance.measure(measureName, markName);
        performance.clearMarks(markName);
        performance.clearMeasures(measureName);
      }
    }

    function schedule(i, resolvePromise) {
      if (i < scripts.length) {
        var scriptSrc = scripts[i];
        var inlineScript = scriptsText[i];
        exec(scriptSrc, inlineScript, resolvePromise);
        schedule(i + 1, resolvePromise);
      }
    }

    return new Promise(function (resolve) {
      return schedule(0, resolve);
    });
  });
}

export default function importHTML(url) {
  return embedHTMLCache[url] || (embedHTMLCache[url] = fetch(url).then(function (response) {
    return response.text();
  }).then(function (html) {
    var _processTpl = processTpl(html, getDomain(url)),
        template = _processTpl.template,
        scripts = _processTpl.scripts,
        entry = _processTpl.entry,
        styles = _processTpl.styles;

    return getEmbedHTML(template, styles).then(function (embedHTML) {
      return {
        template: embedHTML,
        getExternalScripts: function getExternalScripts() {
          return _getExternalScripts(scripts);
        },
        getExternalStyleSheets: function getExternalStyleSheets() {
          return _getExternalStyleSheets(styles);
        },
        execScripts: function execScripts(proxy) {
          return _execScripts(entry, scripts, proxy);
        }
      };
    });
  }));
}
;
export function importEntry(entry) {
  if (!entry) {
    throw new SyntaxError('entry should not be empty!');
  } // html entry


  if (typeof entry === 'string') {
    return importHTML(entry);
  } // config entry


  if (Array.isArray(entry.scripts) || Array.isArray(entry.styles)) {
    var _entry$scripts = entry.scripts,
        scripts = _entry$scripts === void 0 ? [] : _entry$scripts,
        _entry$styles = entry.styles,
        styles = _entry$styles === void 0 ? [] : _entry$styles,
        _entry$html = entry.html,
        html = _entry$html === void 0 ? '' : _entry$html;
    return getEmbedHTML(html, styles).then(function (embedHTML) {
      return {
        template: embedHTML,
        getExternalScripts: function getExternalScripts() {
          return _getExternalScripts(scripts);
        },
        getExternalStyleSheets: function getExternalStyleSheets() {
          return _getExternalStyleSheets(styles);
        },
        execScripts: function execScripts(proxy) {
          return _execScripts(scripts[scripts.length - 1], scripts, proxy);
        }
      };
    });
  } else {
    throw new SyntaxError('entry scripts or styles should be array!');
  }
}